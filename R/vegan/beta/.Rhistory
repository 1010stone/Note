d = DGEList(counts=sub_dat,group=factor(sub_design$group))
d = calcNormFactors(d)
# check samples is in right groups
d$samples
# design.mat = model.matrix(~factor(sub_design$group))
design.mat = model.matrix(~ 0 + factor(sub_design$group))
rownames(design.mat)=colnames(sub_dat)
colnames(design.mat)=levels(factor(sub_design$group))
DAO = estimateDisp(d,design.mat)
fit = glmFit(DAO,design.mat)
BvsA <- makeContrasts(contrasts = opts$compare, levels=design.mat)
lrt = glmLRT(fit,contrast=BvsA)
# lrt = glmLRT(fit,coef=2)
nrDAO=as.data.frame(topTags(lrt, n=nrow(dat)))
nrDAO=as.data.frame(nrDAO)
head(nrDAO)
nrDAO$logFC=round(nrDAO$logFC,3)
nrDAO$logCPM=round(nrDAO$logCPM,3)
nrDAO$level = ifelse(nrDAO$logFC>0 & nrDAO$PValue<opts$pvalue & nrDAO$FDR < opts$fdr, "Enriched",ifelse(nrDAO$logFC<0 & nrDAO$PValue<opts$pvalue & nrDAO$FDR < opts$fdr, "Depleted","NotSig"))
nrDAO$level=factor(nrDAO$level,levels = c("Enriched","Depleted","NotSig"))
# 如果存在物种注释，添加注释信息
if (file.exists(opts$taxonomy)){
tax = read.table(opts$taxonomy, header=T, row.names= 1, sep="\t", comment.char = "")
tax = tax[rownames(nrDAO),]
nrDAO=cbind(nrDAO,tax)
# Draw manhattan plot and color by phylum
x=nrDAO
x$otu=rownames(x)
x$neglogp=-log10(x$PValue)
# order taxonomy
x = arrange(x, Phylum, Class, Order, Family, Genus,otu)
rownames(x) = x$otu
# Taxonomy top 10, other in low abundance
x$tax=gsub("p__","",x$Phylum)
if (file.exists(opts$top10)){
top10 = read.table(opts$top10tax)
top10 = as.vector(top10$V1)
}else{
top10=sort(c("Acidobacteria","Actinobacteria","Bacteroidetes",
"Chloroflexi","Cyanobacteria","Firmicutes","Proteobacteria",
"Verrucomicrobia","Planctomycetes"))
}
print(paste("The top",length(top10)[1],"phylum as legends.", sep=" "))
print(top10)
print("",quote = F)
x$tax=as.vector(x$tax)
# levels(x$tax)=c(unique(x$tax),"Low Abundance")
if (length(unique(x$tax)) > length(top10)){
x[!(x$tax %in% top10),]$tax = "Low Abundance"
}
x$otu=factor(x$otu,levels = x$otu)
FDR = min(x$neglogp[x$level=="Enriched"])
x$Level=x$level
x$Phylum=x$tax
p = ggplot(x, aes(x=otu, y=neglogp, color=Phylum, size=logCPM, shape=Level)) +
geom_point(alpha=.7) +
geom_hline(yintercept=FDR, linetype=2, color="lightgrey") +
scale_shape_manual(values=c(17, 25, 20))+
scale_size(breaks=c(5, 10, 15)) +
labs(x="OTUs", y="-log10(P)", title=paste(group_list[1], "vs", group_list[2], sep=" ")) +
theme_classic() +
theme(axis.ticks.x=element_blank(),axis.text.x=element_blank(),legend.position="right")
p
ggsave(paste(opts$output, "_manhattan.pdf", sep=""), p,
width = opts$width*2, height = opts$height)
}
# Add MeanA and MeanB in percentage
# normlization to percentage
norm = t(t(sub_dat)/colSums(sub_dat,na=T))*100
# check norm is right?
colSums(norm)
# calculate groupA mean
A_list = subset(sub_design, group %in% group_list[1])
A_norm = norm[, rownames(A_list)]
A_mean = as.data.frame(rowMeans(A_norm))
colnames(A_mean)=c("MeanA")
# calculate groupB mean
B_list = subset(sub_design, group %in% group_list[2])
B_norm = norm[, rownames(B_list)]
B_mean = as.data.frame(rowMeans(B_norm))
colnames(B_mean)=c("MeanB")
# merge and reorder
Mean = round(cbind(A_mean, B_mean, A_norm, B_norm),3)
Mean = Mean[rownames(nrDAO),]
output=cbind(nrDAO[,-3],Mean)
# write all OTU for volcano plot and manhattan plot
write.table("OTUID\t", file=paste(opts$output,"_all.txt",sep=""),append = F, quote = F, eol = "", row.names = F, col.names = F)
write.table(output,file=paste0(opts$output,"_all.txt",sep=""),append = T,quote = F,sep = '\t',row.names = T)
# 计算上、下调OTUs数量
NoE= dim(output[output$level=="Enriched",])[1]
NoD= dim(output[output$level=="Depleted",])[1]
# 绘制火山图，
p = ggplot(output, aes(x=logFC, y=logCPM, color=level)) +
geom_point() + xlim(-4, 4) + theme_classic()+
scale_colour_manual(values=c("red","green","grey")) +
labs(x="log2(fold change)", y="log2(count per million)",
title=paste(group_list[1], "vs", group_list[2], sep=" "))+
annotate("text",x=-3,y=15,label=paste(NoD,sep=""))+
annotate("text",x=3,y=15,label=paste(NoE,sep=""))
p
ggsave(paste(opts$output, "_volcano.pdf", sep=""), p,
width = opts$width, height = opts$height)
# 数据筛选，pvalue < 0.05，FDR < 0.2
output=output[output$PValue < opts$pvalue,]
output=output[output$FDR < opts$fdr,]
# 保存筛选结果于sig.txt结尾文件中
write.table("OTUID\t", file=paste(opts$output,"_sig.txt",sep=""),append = F, quote = F, eol = "", row.names = F, col.names = F)
write.table(output,file=paste0(opts$output,"_sig.txt",sep=""),append = T,quote = F,sep = '\t',row.names = T)
if (file.exists(opts$taxonomy)){
# 绘差异OTUs有分组、物种门的热图pheatmap
# 制作注释行变化类型和分类学门水平的数据框
anno_row=data.frame(Level = output$level,
Taxonomy=output$Phylum,
row.names = rownames(output))
# 制作注释列分组信息
anno_col=data.frame(Group = sub_design$group,
row.names = rownames(sub_design))
# 绘制热图
pheatmap(norm[rownames(output),],
scale = "row",
cutree_rows=2,cutree_cols = 2,
annotation_col = anno_col, annotation_row = anno_row,
filename = paste(opts$output, "_heatmap.pdf", sep=""),
width=opts$width, height=opts$height,
annotation_names_row= T,annotation_names_col=F,
show_rownames=F,show_colnames=T,
main = paste("Differential abundance OTUs of",group_list[1], "vs", group_list[2],sep=" "),
fontsize=7,display_numbers=F)
}
}
# edgeR计算组间差异
run_edgeR(dat,design,opts$compare)
# 提示工作完成
print(paste("Output in files in ", opts$output,"*.txt/pdf. All works done!!!", sep = ""))
print("",quote = F)
example(plot)
letters
LETTERS
.libPaths()
setwd("C:/Users/woodc/Desktop/home/ehbio/train/04Amplicon/1809/24Diversity/beta")
#!/usr/bin/env Rscript
#
# Copyright 2016-2018 Yong-Xin Liu <metagenome@126.com>
# 手动运行脚本请，需要设置工作目录，使用 Ctrl+Shift+H 或 Session - Set Work Directory - Choose Directory 设置工作目录为 data (分析项目根目录)
# 清空工作环境 Clean enviroment object
rm(list=ls())
# 1. 程序功能描述和主要步骤
# 程序功能：限制性主坐标轴分析及组间统计
# Functions: Constrained PCoA analysis of groups
# Main steps:
# - Reads OTU table result/otutab.txt
# - Orrdinate by CCA and show in scatter plot
# - Aov.cca() calculate significant between all groups distance
# 程序使用示例
# # 显示脚本帮助
# Rscript ../6script/beta_cpcoa.R -h
#
# # 基于bray距离计算CCA，默认bray方法
# Rscript ../6script/beta_cpcoa.R
#
# # 基于jaccard距离计算CCA
# Rscript ../6script/beta_cpcoa.R -t jaccard
#
# # 附完整参数
# Rscript ../6script/beta_cpcoa.R -i gg/otutab.txt -t bray \
# -d doc/design.txt -n group \
# -o gg/beta/cpcoa_bray # filename prefix for output directory name
options(warn = -1)
# 1.2 解析命令行
# 设置清华源加速下载
site="https://mirrors.tuna.tsinghua.edu.cn/CRAN"
# 判断命令行解析是否安装，安装并加载
if (!suppressWarnings(suppressMessages(require("optparse", character.only = TRUE, quietly = TRUE, warn.conflicts = FALSE)))) {
install.packages(p, repos=site)
require("optparse",character.only=T)
}
# 解析命令行
if (TRUE){
option_list = list(
make_option(c("-t", "--type"), type="character", default="bray",
help="Distance type; 距离类型, 可选manhattan, euclidean, canberra, bray, kulczynski, jaccard, gower, altGower, morisita, horn, mountford, raup , binomial, chao, cao or mahalanobis[default %default]"),
make_option(c("-i", "--input"), type="character", default="otutab_norm.txt",
help="Input norm otutab; 标准化OTU表 [default %default]"),
make_option(c("-d", "--design"), type="character", default="../design.txt",
help="design file; 实验设计文件 [default %default]"),
make_option(c("-n", "--group"), type="character", default="group",
help="name of group type; 分组列名 [default %default]"),
make_option(c("-w", "--width"), type="numeric", default=4,
help="Width of figure; 图片宽 [default %default]"),
make_option(c("-e", "--height"), type="numeric", default=2.5,
help="Height of figure; 图片高 [default %default]"),
make_option(c("-o", "--output"), type="character", default="",
help="output directory or prefix; 输出文件前缀, 通常会有统计表txt、矢量图pdf和位图png [default %default]")
)
opts = parse_args(OptionParser(option_list=option_list))
# 调置如果无调设置输出，根据其它参数设置默认输出
if (opts$output==""){opts$output=paste("cpcoa_",opts$type, sep = "")}
# 显示输入输出确认是否正确
print(paste("The normalized OTU table file is ", opts$input,  sep = ""))
print(paste("Distance type is ", opts$type,  sep = ""))
print(paste("The design file is ", opts$design,  sep = ""))
print(paste("The group name is ", opts$group,  sep = ""))
print(paste("Output figure width ", opts$width,  sep = ""))
print(paste("Output figure height ", opts$height,  sep = ""))
print(paste("The output file prefix is ", opts$output, sep = ""))
}
# 2. 依赖关系检查、安装和加载
# 2.1 安装CRAN来源常用包
# 依赖包列表：参数解析、数据变换、绘图和开发包安装、安装依赖、ggplot主题
package_list = c("reshape2","ggplot2","vegan")
# 判断R包加载是否成功来决定是否安装后再加载
for(p in package_list){
if(!suppressWarnings(suppressMessages(require(p, character.only = TRUE, quietly = TRUE, warn.conflicts = FALSE)))){
install.packages(p, repos=site)
suppressWarnings(suppressMessages(library(p, character.only = TRUE, quietly = TRUE, warn.conflicts = FALSE)))
}
}
# 2.2 安装bioconductor常用包
package_list = c("digest","ggrepel")
for(p in package_list){
if(!suppressWarnings(suppressMessages(require(p, character.only = TRUE, quietly = TRUE, warn.conflicts = FALSE)))){
source("https://bioconductor.org/biocLite.R")
biocLite(p)
suppressWarnings(suppressMessages(library(p, character.only = TRUE, quietly = TRUE, warn.conflicts = FALSE)))
}
}
# 2.3 安装Github常用包
# 参数解析、数据变换、绘图和开发包安装
package_list = c("kassambara/ggpubr")
for(p in package_list){
q=unlist(strsplit(p,split = "/"))[2]
if(!suppressWarnings(suppressMessages(require(q, character.only = TRUE, quietly = TRUE, warn.conflicts = FALSE)))){
install_github(p)
suppressWarnings(suppressMessages(library(q, character.only = TRUE, quietly = TRUE, warn.conflicts = FALSE)))
}
}
# 3. 读取输入文件
# 读取距离矩阵文件
otutab = read.table(opts$input, header=T, row.names= 1, sep="\t", comment.char="")
# 读取实验设计
design = read.table(opts$design, header=T, row.names= 1, sep="\t", comment.char="")
# 提取样品组信息,默认为group可指定
sampFile = as.data.frame(design[,opts$group],row.names = row.names(design))
colnames(sampFile)[1] = "group"
sampFile$sample=row.names(design)
# 数据筛选，筛选两文件中共有
idx = rownames(sampFile) %in% colnames(otutab) # match design with alpha
sampFile = sampFile[idx,]
otutab = otutab[,rownames(sampFile)]
# 4. 统计与绘图
# 提取CCA中主要结果
variability_table = function(cca){
chi = c(cca$tot.chi, cca$CCA$tot.chi, cca$CA$tot.chi)
variability_table = cbind(chi, chi/chi[1])
colnames(variability_table) = c("inertia", "proportion")
rownames(variability_table) = c("total", "constrained", "unconstrained")
return(variability_table)
}
# Constrained analysis OTU table by genotype
capscale.gen = capscale(t(otutab) ~ group, data=sampFile, add=F, sqrt.dist=T, distance=opts$type)
# ANOVA-like permutation analysis
perm_anova.gen = anova.cca(capscale.gen, permutations = 1000, parallel = 4)
# generate variability tables and calculate confidence intervals for the variance
var_tbl.gen = variability_table(capscale.gen)
eig = capscale.gen$CCA$eig
variance = var_tbl.gen["constrained", "proportion"]
p.val = perm_anova.gen[1, 4]
# extract the weighted average (sample) scores
points = capscale.gen$CCA$wa[, 1:2]
points = as.data.frame(points)
colnames(points) = c("x", "y")
points = cbind(points, sampFile[match(rownames(points), rownames(sampFile)),])
# plot CPCo 1 and 2
p = ggplot(points, aes(x=x, y=y, color=group)) + geom_point() +
labs(x=paste("CPCoA 1 (", format(100 * eig[1] / sum(eig), digits=4), "%)", sep=""),
y=paste("CPCoA 2 (", format(100 * eig[2] / sum(eig), digits=4), "%)", sep="")) +
ggtitle(paste(format(100 * variance, digits=3), " % of variance; p=",format(p.val, digits=2),sep="")) +
theme_classic()+
stat_ellipse(level=0.68)
p
# 保存pdf和png格式方便查看和编辑
ggsave(paste(opts$output, ".pdf", sep=""), p, width = opts$width, height = opts$height)
# ggsave(paste(opts$output, ".png", sep=""), p, width = opts$width, height = opts$height)
print(paste(opts$output, ".pdf finished.", sep = ""))
# 添加样品标签
p=p+geom_text_repel(label=paste(rownames(points)),colour="black",size=3)
p
# 保存pdf和png格式方便查看和编辑
ggsave(paste(opts$output, "_label.pdf", sep=""), p, width = opts$width, height = opts$height)
# ggsave(paste(opts$output, "_label.png", sep=""), p, width = opts$width, height = opts$height)
print(paste(opts$output, "_label.pdf finished.", sep = ""))
# 5. 保存图表
# 提示工作完成
print("Beta diversity: Constrianed PCoA / CCA done!!!")
knitr::opts_chunk$set(echo = TRUE)
# 设置清华源加速下载
site="https://mirrors.tuna.tsinghua.edu.cn/CRAN"
# 设置清华源加速下载
site="https://mirrors.tuna.tsinghua.edu.cn/CRAN"
# 判断命令行解析是否安装，安装并加载
if (!suppressWarnings(suppressMessages(require("optparse", character.only = TRUE, quietly = TRUE, warn.conflicts = FALSE)))) {
install.packages(p, repos=site)
require("optparse",character.only=T)
}
# 解析命令行
if (TRUE){
option_list = list(
make_option(c("-t", "--type"), type="character", default="bray",
help="Distance type; 距离类型, 可选manhattan, euclidean, canberra, bray, kulczynski, jaccard, gower, altGower, morisita, horn, mountford, raup , binomial, chao, cao or mahalanobis[default %default]"),
make_option(c("-i", "--input"), type="character", default="otutab_norm.txt",
help="Input norm otutab; 标准化OTU表 [default %default]"),
make_option(c("-d", "--design"), type="character", default="../design.txt",
help="design file; 实验设计文件 [default %default]"),
make_option(c("-n", "--group"), type="character", default="group",
help="name of group type; 分组列名 [default %default]"),
make_option(c("-w", "--width"), type="numeric", default=4,
help="Width of figure; 图片宽 [default %default]"),
make_option(c("-e", "--height"), type="numeric", default=2.5,
help="Height of figure; 图片高 [default %default]"),
make_option(c("-o", "--output"), type="character", default="",
help="output directory or prefix; 输出文件前缀, 通常会有统计表txt、矢量图pdf和位图png [default %default]")
)
opts = parse_args(OptionParser(option_list=option_list))
# 调置如果无调设置输出，根据其它参数设置默认输出
if (opts$output==""){opts$output=paste("cpcoa_",opts$type, sep = "")}
# 显示输入输出确认是否正确
print(paste("The normalized OTU table file is ", opts$input,  sep = ""))
print(paste("Distance type is ", opts$type,  sep = ""))
print(paste("The design file is ", opts$design,  sep = ""))
print(paste("The group name is ", opts$group,  sep = ""))
print(paste("Output figure width ", opts$width,  sep = ""))
print(paste("Output figure height ", opts$height,  sep = ""))
print(paste("The output file prefix is ", opts$output, sep = ""))
}
# 2.1 安装CRAN来源常用包
# 依赖包列表：参数解析、数据变换、绘图和开发包安装、安装依赖、ggplot主题
package_list = c("reshape2","ggplot2","vegan")
# 判断R包加载是否成功来决定是否安装后再加载
for(p in package_list){
if(!suppressWarnings(suppressMessages(require(p, character.only = TRUE, quietly = TRUE, warn.conflicts = FALSE)))){
install.packages(p, repos=site)
suppressWarnings(suppressMessages(library(p, character.only = TRUE, quietly = TRUE, warn.conflicts = FALSE)))
}
}
# 2.2 安装bioconductor常用包
package_list = c("ggrepel")
for(p in package_list){
if(!suppressWarnings(suppressMessages(require(p, character.only = TRUE, quietly = TRUE, warn.conflicts = FALSE)))){
source("https://bioconductor.org/biocLite.R")
biocLite(p)
suppressWarnings(suppressMessages(library(p, character.only = TRUE, quietly = TRUE, warn.conflicts = FALSE)))
}
}
# 2.3 安装Github常用包
# 参数解析、数据变换、绘图和开发包安装
package_list = c("kassambara/ggpubr")
for(p in package_list){
q=unlist(strsplit(p,split = "/"))[2]
if(!suppressWarnings(suppressMessages(require(q, character.only = TRUE, quietly = TRUE, warn.conflicts = FALSE)))){
install_github(p)
suppressWarnings(suppressMessages(library(q, character.only = TRUE, quietly = TRUE, warn.conflicts = FALSE)))
}
}
knitr::opts_chunk$set(echo = TRUE)
# 设置清华源加速下载
site="https://mirrors.tuna.tsinghua.edu.cn/CRAN"
# 判断命令行解析是否安装，安装并加载
if (!suppressWarnings(suppressMessages(require("optparse", character.only = TRUE, quietly = TRUE, warn.conflicts = FALSE)))) {
install.packages(p, repos=site)
require("optparse",character.only=T)
}
# 解析命令行
if (TRUE){
option_list = list(
make_option(c("-t", "--type"), type="character", default="bray_curtis",
help="Distance type; 距离类型, 可选bray_curtis, unifrac, unifrac_binary [default %default]"),
make_option(c("-i", "--input"), type="character", default="",
help="Distance matrix; 距离矩阵 [default %default]"),
make_option(c("-d", "--design"), type="character", default="../design.txt",
help="design file; 实验设计文件 [default %default]"),
make_option(c("-n", "--group"), type="character", default="group",
help="name of group type; 分组列名 [default %default]"),
make_option(c("-w", "--width"), type="numeric", default=4,
help="Width of figure; 图片宽 [default %default]"),
make_option(c("-e", "--height"), type="numeric", default=2.5,
help="Height of figure; 图片高 [default %default]"),
make_option(c("-o", "--output"), type="character", default="",
help="output directory or prefix; 输出文件前缀, 通常会有统计表txt、矢量图pdf和位图png [default %default]")
)
opts = parse_args(OptionParser(option_list=option_list))
# 调置如果无调设置输出，根据其它参数设置默认输出
if (opts$input==""){opts$input=paste(opts$type,".txt", sep = "")}
if (opts$output==""){opts$output=paste("cpcoa_",opts$type, sep = "")}
# 显示输入输出确认是否正确
print(paste("Distance type is ", opts$type,  sep = ""))
print(paste("The distrance matrix file is ", opts$input,  sep = ""))
print(paste("The design file is ", opts$design,  sep = ""))
print(paste("The group name is ", opts$group,  sep = ""))
print(paste("Output figure width ", opts$width,  sep = ""))
print(paste("Output figure height ", opts$height,  sep = ""))
print(paste("The output file prefix is ", opts$output, sep = ""))
}
# 2.1 安装CRAN来源常用包
# 依赖包列表：参数解析、数据变换、绘图和开发包安装、安装依赖、ggplot主题
package_list = c("reshape2","ggplot2","vegan")
# 判断R包加载是否成功来决定是否安装后再加载
for(p in package_list){
if(!suppressWarnings(suppressMessages(require(p, character.only = TRUE, quietly = TRUE, warn.conflicts = FALSE)))){
install.packages(p, repos=site)
suppressWarnings(suppressMessages(library(p, character.only = TRUE, quietly = TRUE, warn.conflicts = FALSE)))
}
}
# 2.2 安装bioconductor常用包
package_list = c("ggrepel")
for(p in package_list){
if(!suppressWarnings(suppressMessages(require(p, character.only = TRUE, quietly = TRUE, warn.conflicts = FALSE)))){
source("https://bioconductor.org/biocLite.R")
biocLite(p)
suppressWarnings(suppressMessages(library(p, character.only = TRUE, quietly = TRUE, warn.conflicts = FALSE)))
}
}
# 2.3 安装Github常用包
# 参数解析、数据变换、绘图和开发包安装
package_list = c("kassambara/ggpubr")
for(p in package_list){
q=unlist(strsplit(p,split = "/"))[2]
if(!suppressWarnings(suppressMessages(require(q, character.only = TRUE, quietly = TRUE, warn.conflicts = FALSE)))){
install_github(p)
suppressWarnings(suppressMessages(library(q, character.only = TRUE, quietly = TRUE, warn.conflicts = FALSE)))
}
}
# 提取CCA中主要结果
variability_table = function(cca){
chi = c(cca$tot.chi, cca$CCA$tot.chi, cca$CA$tot.chi)
variability_table = cbind(chi, chi/chi[1])
colnames(variability_table) = c("inertia", "proportion")
rownames(variability_table) = c("total", "constrained", "unconstrained")
return(variability_table)
}
# 提取样品组信息,默认为group可指定
# sampFile = as.data.frame(design[,opts$group],row.names = row.names(design))
# colnames(sampFile)[1] = "group"
# sampFile$sample=row.names(design)
design$group=design[,opts$group]
# 读取距离矩阵文件
distMat = read.table(opts$input, header=T, row.names= 1, sep="\t", comment.char="")
# 读取实验设计
design = read.table(opts$design, header=T, row.names= 1, sep="\t", comment.char="")
# 提取样品组信息,默认为group可指定
# sampFile = as.data.frame(design[,opts$group],row.names = row.names(design))
# colnames(sampFile)[1] = "group"
# sampFile$sample=row.names(design)
design$group=design[,opts$group]
sampFile=design
# 数据筛选，筛选两文件中共有
idx = rownames(sampFile) %in% colnames(distMat) # match design with alpha
sampFile = sampFile[idx,]
distMat = distMat[rownames(sampFile),rownames(sampFile)]
# 提取CCA中主要结果
variability_table = function(cca){
chi = c(cca$tot.chi, cca$CCA$tot.chi, cca$CA$tot.chi)
variability_table = cbind(chi, chi/chi[1])
colnames(variability_table) = c("inertia", "proportion")
rownames(variability_table) = c("total", "constrained", "unconstrained")
return(variability_table)
}
# Constrained analysis OTU table by genotype
capscale.gen = capscale(as.dist(distMat) ~ group, data=sampFile, add=F, sqrt.dist=T, distance=opts$type)
# ANOVA-like permutation analysis
perm_anova.gen = anova.cca(capscale.gen, permutations = 1000, parallel = 4)
# generate variability tables and calculate confidence intervals for the variance
var_tbl.gen = variability_table(capscale.gen)
eig = capscale.gen$CCA$eig
variance = var_tbl.gen["constrained", "proportion"]
p.val = perm_anova.gen[1, 4]
# extract the weighted average (sample) scores
points = capscale.gen$CCA$wa[, 1:2]
points = as.data.frame(points)
colnames(points) = c("x", "y")
points = cbind(points, sampFile[match(rownames(points), rownames(sampFile)),])
# plot CPCo 1 and 2
p = ggplot(points, aes(x=x, y=y, color=group)) + geom_point() +
labs(x=paste("CPCoA 1 (", format(100 * eig[1] / sum(eig), digits=4), "%)", sep=""),
y=paste("CPCoA 2 (", format(100 * eig[2] / sum(eig), digits=4), "%)", sep="")) +
ggtitle(paste(format(100 * variance, digits=3), " % of variance; p=",format(p.val, digits=2),sep="")) +
theme_classic()+
stat_ellipse(level=0.68)
p
head(sampFile)
# 提取CCA中主要结果
variability_table = function(cca){
chi = c(cca$tot.chi, cca$CCA$tot.chi, cca$CA$tot.chi)
variability_table = cbind(chi, chi/chi[1])
colnames(variability_table) = c("inertia", "proportion")
rownames(variability_table) = c("total", "constrained", "unconstrained")
return(variability_table)
}
# Constrained analysis OTU table by genotype
# 限制条件可以添加协变量，如 +Condition(genotype + site + BarcodeSequence)
capscale.gen = capscale(as.dist(distMat) ~ group+Condition(BarcodeSequence), data=sampFile, add=F, sqrt.dist=T, distance=opts$type)
# Constrained analysis OTU table by genotype
# 限制条件可以添加协变量，如 +Condition(genotype + site + BarcodeSequence)
capscale.gen = capscale(as.dist(distMat) ~ group+Condition(BarcodeSequence), data=sampFile, add=F, sqrt.dist=T, distance=opts$type)
capscale.gen$CCA$wa
# Constrained analysis OTU table by genotype
# 限制条件可以添加协变量，如 +Condition(genotype + site + BarcodeSequence)
capscale.gen = capscale(as.dist(distMat) ~ group, data=sampFile, add=F, sqrt.dist=T, distance=opts$type)
capscale.gen$CCA$wa
# Constrained analysis OTU table by genotype
# 限制条件可以添加协变量，如 +Condition(genotype + site + BarcodeSequence)
capscale.gen = capscale(as.dist(distMat) ~ group+Condition(BarcodeSequence), data=sampFile, add=F, sqrt.dist=T, distance=opts$type)
scores(capscale.gen)
